#    -*- mode: org -*-


Archived entries from file /home/dzhus/projects/dsmc/dsmc.org
* OpenGL
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-07-23 Пн. 17:28
  :ARCHIVE_FILE: ~/projects/dsmc/dsmc.org
  :ARCHIVE_OLPATH: Отрисовка тел/Как отрисовывать
  :ARCHIVE_CATEGORY: dsmc
  :END:
  См. работу Nigel Stewart.

  CSG rendering can be regarded as two sub-problems: clipping and
  visible surface determination.

  *Алгоритм Голдфизера:*

  1. Дерево должно быть нормализовано (приведено в вид объединения
     произведений. В произведение могут входить примитивы и их
     дополнения).
  2. Отрисовываем каждое произведение во временный z-buffer, после
     чего выводим все буферы последовательно (корректная отрисовка
     объединения выполняется средствами OpenGL с помощью проверки
     глубины каждой точки — тривиально).
  3. В каждом произведении всякий его элемент «сужается» на прочие
     объекты следующим образом.

     a. Рисуем сужаемый элемент в буфер глубины. Удаляем задние
     грани (либо передние, если нужно объект взят с дополнением).
     
     b. Отключив тест глубины, рисуем прочие объекты. В буфере
     трафарета обращаем значение пикселя для всякого фрагмента
     (удаление граней отключено). Как бы считаем, сколько раз нужно
     пересечь другие поверхности, чтобы долететь до тела. Раз все
     примитивы выпуклые, то внутренние точки пересечения достигаются
     за нечётное количество пересечений (влетели и ещё не вылетели).

     c. Рисуем сужаемый элемент уже по-настоящему, удаляя задние
     грани. В трафарете учитываем только нечётные (равные 1) пиксели
     (либо чётные, если объект вычитался из сужаемого). Как сужать:
     поставить depthRange в 1.0-1.0, рисуем плоскость во весь экран
     с нужным тестом по трафарету, так что часть пикселей исходной
     поверхности уходит в Zf. Повторяем операцию после рисовки
     каждого сужающего объекта. Так работает OpenCSG. 

     Потом нужно как-то проверить

   Нужно сохранять/восстанавливать содержимое z-buffer:
     - glBlitFramebuffer;

     - PBO
* На чём отрисовывать
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-07-23 Пн. 17:28
  :ARCHIVE_FILE: ~/projects/dsmc/dsmc.org
  :ARCHIVE_OLPATH: Отрисовка тел
  :ARCHIVE_CATEGORY: dsmc
  :END:
** PGM
   Очень простой формат изображения
** GLUT
   Непонятная координатная система: (x, y) точки не соответствуют
   пикселям окна рисования.
** Pixbuf/drawingarea
   Надо рисовать поточечно?
* OpenGL
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-07-23 Пн. 17:28
  :ARCHIVE_FILE: ~/projects/dsmc/dsmc.org
  :ARCHIVE_OLPATH: Отрисовка тел
  :ARCHIVE_CATEGORY: dsmc
  :END:
  
** Освещение
#+BEGIN_SRC haskell
  -- Отдельный источник (ambient, diffuse и т.д.)
  ambient light0 $= lightColor
  position light0 $= lightPosition
  light light0 $= Enabled
  
  -- Включить освещение
  lighting $= Enabled
  
  -- Общий фоновый свет
  lightModelAmbient $= lightColor
#+END_SRC

** Включение отсечки по глубине
#+BEGIN_SRC haskell
  depthFunc $= Just Lequal
#+END_SRC

** Установка камеры
#+BEGIN_SRC haskell
  lookAt (Vertex3 0.0 0.0 5.0) (Vertex3 0.0 0.0 0.0) (Vector3 0.0 1.0 0.0)
  lookAt eye lookto up
#+END_SRC

** Трафаретный буфер
   stencilFunc (f, ref, mask) задаёт условие прохождения трафаретного
   теста. stencilOp задаёт преобразование соответствующей точки
   буфера.
   Плюс надо включить: stencilTest $= Enabled.
   Очистка: clear [StencilBuffer].
   При инициализации: [WithStencilBuffer]

* Композиции                                                       :OBSOLETE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-07-23 Пн. 17:29
  :ARCHIVE_FILE: ~/projects/dsmc/dsmc.org
  :ARCHIVE_OLPATH: Граничные условия на тело/Как у нас
  :ARCHIVE_CATEGORY: dsmc
  :END:
  *Пересечение*: вычисляем время до удара с каждой поверхностью. Если
  они все отрицательные (пролетели внутрь *каждой*), вычисляем из
  них минимальное, для соответствующей поверхности делаем отскок и
  обращаем скорость от неё.
  *Объединение*: смотрим, пролетелил ли мы внутрь *хотя бы одной*,
  вычисляем *максимальное время* (в какую успели глубже всего
  погрузиться), отскок от соответствующей.
  *Дополнение*: 





