* Соударение
** Как у нас
   Считаем время до соударения с плоскостью. Если оно положительная,
   то точка ещё не долетела. Если отрицательное, то перелёт — нужно
   вернуть точку в место столкновения и вместо отлёта внутрь за
   плоскость вернуть её наружу, обратив вдоль нормали вектор скорости.
   Время домножается на _знак скалярного произведения_ между вектором
   скорости молекулы и нормалью к поверхности (в противном случае
   отскочившая частица будет считаться вновь попавшей в поверхность
   уже с другой стороны — надо учитывать ориентацию плоскости).
*** Композиции                                                     :OBSOLETE:
    *Пересечение*: вычисляем время до удара с каждой поверхностью. Если
    они все отрицательные (пролетели внутрь *каждой*), вычисляем из
    них минимальное, для соответствующей поверхности делаем отскок и
    обращаем скорость от неё.
    *Объединение*: смотрим, пролетелил ли мы внутрь *хотя бы одной*,
    вычисляем *максимальное время* (в какую успели глубже всего
    погрузиться), отскок от соответствующей.
    *Дополнение*: 
*** Композиции
    По расположению и вектору скорости всякой частицы строим прямую.
    Находим пересечения этой прямой со всеми элементами тела. Выбираем
    первое пересечение, попадающее в интервал [-dt;0].

    Часть траектории частицы, лежащая внутри какого-либо объекта,
    обозначается отрезком на действительной прямой (для
    полупространства — лучом). Полученная структура называется Trace и
    является списком таких отрезков.

    Trace пересечения объектов — пересечение Trace. Аналогично для
    объединения и дополнения. Для границ отрезков также указаны
    нормали соответствующей поверхности в точке возможного соударения.
    При выполнении операции дополнения эти нормали домножаются на -1.
**** [/] Проблемы
     - [ ] Возможен отскок внутрь соседствующего тела. Если делать
       после hit проверку на ещё одно соударение, есть вероятность
       зацикливания (если мы попали точно встык пластин)
     - [ ] Не бывает ли t в [-dt;0], когда частица вне тела (т. е.
       вектор скорости и нормаль дают положительное скалярное
       произведение). После отскока этого не случится, т.к. за
       отскоком последует шаг move.
** Bird
** Закиров
   Строим пересечение луча и кривой второго порядка, получая две точки
   t (время соударения). Если t ≥ eps (отсечка отрицательных корней),
   то был удар. Закиров не учитывает соударения частиц до подлёта к
   телу, поэтому можно сразу построить прямую и найти для неё точку
   удара. В таком подходе нет итерирования по времени вообще, точки
   как бы сразу долетают до тела.
** Как ускорить и улучшить
   - для тел вводить упрощённый описывающий объём и сначала проверять,
     попала ли точка в него;
   - разбивать пространство через octree;
   - разбивать пространство на адаптивную сетку (также полезно для
     соударений) и проверять на удары только с поверхностями,
     попавшими в ячейку сетки
** Посмотреть проекты
   - http://opencsg.org/ — библиотека для рендера CSG;
   - http://www.nigels.com/research/ — о рендере CSG;
   - http://www.openscad.org/ — создание CSG-моделей;
   - http://gts.sourceforge.net/ — GNU Triangulated Surface (операции
     над поверхностями);
